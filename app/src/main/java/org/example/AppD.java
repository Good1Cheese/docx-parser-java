/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.JAXBException;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.Part;
import org.docx4j.openpackaging.parts.PartName;
import org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.wml.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.nio.file.Files.walk;

public class AppD {
    static List<String> imagesNames = new ArrayList<>();

    public static void main(String[] args) throws Docx4JException, JAXBException, IOException {
        // Выводить в правильном формате + Таблички с учетом паддинга
        File doc = new File("example.docx");

        WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(doc);
        MainDocumentPart mainDocumentPart = wordMLPackage.getMainDocumentPart();
        int imagesIndex = 0;

        parseImages(wordMLPackage);

        for (Object obj : mainDocumentPart.getContent()) {

            if (obj instanceof P text) {
                var b = text;
                for (var b1 : text.getContent()) {
                    if (b1 instanceof R r1) {
                        for (var b2 : r1.getContent()) {
                            if (b2 instanceof JAXBElement drawing) {
                                var v = drawing.getValue();

                                if (v instanceof Drawing) {
                                    System.out.println("*** IMAGE *** - " + imagesNames.get(imagesIndex));
                                    imagesIndex++;
                                }
                            }
                        }
                    }
                }
            }

            if (obj instanceof JAXBElement jaxb) {
                if (jaxb.getValue() instanceof Tbl tbl) {
                    for (Object tr : tbl.getContent()) {
                        for (Object cellObj : ((Tr) tr).getContent()) {
                            var paragraph = ((JAXBElement) cellObj).getValue();
                            var tc = (Tc) paragraph;
                            for (Object content : tc.getContent()) {
                                System.out.print(content + " ");
                            }
                        }
                        System.out.println();
                    }
                }
            }

            if (obj instanceof P text) {
                System.out.println(text);
            }
        }
    }

    private static void parseImages(WordprocessingMLPackage wordMLPackage) throws IOException {
        String outputFolder = "extracted_images";
        File outputDir = new File(outputFolder);

        if (outputDir.exists()) {
            walk(Path.of(outputFolder)).map(Path::toFile).forEach(File::delete);
        }

        outputDir.mkdirs();

        for (Map.Entry<PartName, Part> set : wordMLPackage.getParts().getParts().entrySet()) {
            if (set.getValue() instanceof BinaryPartAbstractImage img) {
                Pattern pattern = Pattern.compile("\\w+.\\w+$");
                Matcher m = pattern.matcher(img.getPartName().getName());
                m.find();
                var fileName = m.group(0);

                imagesNames.add(fileName);
                try (FileOutputStream fos = new FileOutputStream(new File(outputDir, fileName))) {
                    img.writeDataToOutputStream(fos);
                    System.out.println("Extracted image saved as: " + fileName);
                } catch (Exception e) {
                    System.err.println("Error saving image: " + e.getMessage());
                }
            }
        }

        System.out.println();
    }
}