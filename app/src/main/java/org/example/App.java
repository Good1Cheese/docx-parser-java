/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.JAXBException;
import org.docx4j.finders.TableFinder;
import org.docx4j.jaxb.XPathBinderAssociationIsPartialException;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.Part;
import org.docx4j.openpackaging.parts.PartName;
import org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage;
import org.docx4j.openpackaging.parts.WordprocessingML.ImagePngPart;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.wml.*;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Map;

public class App {
    public static void main(String[] args) throws Docx4JException, JAXBException {
        // Выводить в правильном формате + Таблички с учетом паддинга
        File doc = new File("example2.docx");

        WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(doc);
        MainDocumentPart mainDocumentPart = wordMLPackage.getMainDocumentPart();

        parseText(mainDocumentPart);
        parseImages(wordMLPackage);
        parseTable(mainDocumentPart);
    }

    private static void parseText(MainDocumentPart mainDocumentPart) throws JAXBException, XPathBinderAssociationIsPartialException {
        String textNodesXPath = "//w:t";
        List<Object> textNodes = mainDocumentPart.getJAXBNodesViaXPath(textNodesXPath, true);

        for (Object obj : textNodes) {
            Text text = (Text) ((JAXBElement) obj).getValue();
            String textValue = text.getValue();
            System.out.println(textValue);
        }
    }

    private static void parseImages(WordprocessingMLPackage wordMLPackage) {
        String outputFolder = "extracted_images";
        File outputDir = new File(outputFolder);

        if (!outputDir.exists()) {
            outputDir.mkdirs();
        }

        for (Map.Entry<PartName, Part> set : wordMLPackage.getParts().getParts().entrySet()) {
            if (set.getValue() instanceof ImagePngPart png) {
                var binaryPart = (BinaryPartAbstractImage) png;

                String uniqueFilename = System.nanoTime() + ".png";

                try (FileOutputStream fos = new FileOutputStream(new File(outputDir, uniqueFilename))) {
                    binaryPart.writeDataToOutputStream(fos);
                    System.out.println("Extracted image saved as: " + uniqueFilename);
                } catch (Exception e) {
                    System.err.println("Error saving image: " + e.getMessage());
                }
            }
        }
    }

    private static void parseTable(MainDocumentPart mainDocumentPart) {
        TableFinder finder = new TableFinder();
        finder.walkJAXBElements(mainDocumentPart.getContent());

        for (Tbl tbl : finder.tblList) {
            for (Object tr : tbl.getContent()) {
                Tr tr1 = (Tr) tr;
                for (Object cellObj : tr1.getContent()) {
                    var paragraph = ((JAXBElement) cellObj).getValue();
                    var tc = (Tc) paragraph;
                    for (Object content : tc.getContent()) {
                        System.out.println(content);
                    }
                }
            }
            System.out.println(); // Add newline between tables
        }
    }
}
